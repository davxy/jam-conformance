-- Specification for Fuzzer Protocol V1

FuzzProtocol DEFINITIONS ::= BEGIN

-- `Block`, `Header`, `WorkReport`, `SegmentRootLookup` as defined by gray paper. 
-- See also https://github.com/w3f/jamtestvectors/blob/master/lib/jam-types.asn

-- Refer to jam-types.asn in the jam-test-vectors repo

U8 ::= INTEGER (0..255)
U32 ::= INTEGER (0..4294967295)

Hash ::= OCTET STRING (SIZE(32))
HeaderHash ::= Hash
StateRootHash ::= Hash

-- Features is a u32 where the MSB (bit 31) is reserved for future extensions
-- If MSB is 1, another u32 follows with more feature flags
Features ::= U32

-- Feature bit constants
feature-block-ancestry INTEGER ::= 1      -- 2^0
feature-simple-forking INTEGER ::= 2      -- 2^1
feature-bundle-refinement INTEGER ::= 4   -- 2^2
feature-exports INTEGER ::= 8             -- 2^3
feature-pvm-tracing INTEGER ::= 16        -- 2^4
feature-extension INTEGER ::= 2147483648  -- 2^31 = 0x80000000

Version ::= SEQUENCE {
    major U8,
    minor U8,
    patch U8
}

PeerInfo ::= SEQUENCE {
    -- Fuzzer protocol version
    fuzz-version U8,
    -- Application version
    app-version  Version,
    -- JAM protocol version
    jam-version  Version,
    -- Supported features
    features Features,
    -- Application name
    name UTF8String
}

TrieKey ::= OCTET STRING (SIZE(31))

KeyValue ::= SEQUENCE {
    key     TrieKey,
    value   OCTET STRING
}

State ::= SEQUENCE OF KeyValue

ImportBlock ::= Block

SetState ::= SEQUENCE {
    header Header,
    state State
}

GetState ::= HeaderHash

GetExports ::= OpaqueHash

StateRoot ::= StateRootHash

--------------------------------------
-- Refinement
--------------------------------------

RefineBundle ::= SEQUENCE {
    core-index  CoreIndex,
    bundle WorkPackageBundle,
    segment-root-mappings  SegmentRootLookup,
    auth-gas-used Gas,
    auth-trace    ByteSequence
}

Segment ::= OCTET STRING (SIZE(4104))

Exports ::= SEQUENCE of Segment

WorkPackageBundle ::= SEQUENCE {
    work-package     WorkPackage,                        
    extrinsics       SEQUENCE OF OCTET STRING,            
    import-segments  SEQUENCE OF SEQUENCE OF Segment, 
    justifications   SEQUENCE OF SEQUENCE OF SEQUENCE OF Hash
}

--------------------------------------
-- PVM Traces
--------------------------------------

GetPVMTrace ::= SEQUENCE {
   filter-s   U32,
   filter-wi  U8,
   gas-used-ranges       SEQUENCE OF GasUsedRange
}

GasUsedRange := SEQUENCE {
    gas-used-max U64,
    gas-used-min U64
}

PVMTrace ::= SEQUENCE OF PVMStep

PVMStep := SEQUENCE {
    opcode    U8,
    wi        U8,  
    s         U32,
    pc        U32,
    gas       U64,
    r0        U64,
    r1        U64,
    r2        U64,
    r3        U64,
    r4        U64,
    r5        U64,
    r6        U64,
    r7        U64,
    r8        U64,
    r9        U64,
    r10       U64,
    r11       U64,
    r12       U64,
    reserved0 U16,
    reserved1 U32
}

--------------------------------------
-- Messages
--------------------------------------

Message ::= CHOICE {
    peer-info     [0] PeerInfo,
    import-block  [1] ImportBlock,
    set-state     [2] SetState,
    get-state     [3] GetState,
    state         [4] State,
    state-root    [5] StateRoot,
    refine-bundle [6] RefineBundle,
    work-report   [7] WorkReport,
    get-exports   [8] GetExports,
    exports       [9] Exports,
    get-pvm-trace [10] GetPVMTrace,
    pvm-trace     [11] PVMTrace
}

END
